"""
SnakeMake workflow definition file.

"""
import os
import shutil
import glob
from snakemake.io import expand, glob_wildcards

# Define input file paths.
input_fasta_dirs = glob.glob(os.path.join('resources', '*_FASTA'))
fasta_names = [os.path.basename(x).rsplit('_', 1)[0] \
                for x in input_fasta_dirs]
input_fasta_files = glob.glob(os.path.join(
                                  os.path.join('resources',
                                               '*_FASTA'), 
                                  '*.faa'))

# Check input data formatting.
for input_dir in input_fasta_dirs:
    files = glob.glob(os.path.join(input_dir, '*.afaa'))
    files_identified_as_guide_alignments = \
    [x for x in files if 'GUIDE' in x]
    assert len(files_identified_as_guide_alignments) <= 1, """More than one
    guide alignment detected in directory: %s""" % input_dir

# Define which rules are to be run without submitting to a cluster via a job
# scheduler.
localrules: final_results, help, superfast_fasttree, ultrafast_iqtree


rule final_results:
    """
    Get output files from full analysis.
    """
    input:
        expand('results/fasttree_pdf/{fasta_name}.pdf', \
            fasta_name = fasta_names),
        expand('results/iqtree_ultrafast_pdf/{fasta_name}.pdf', \
            fasta_name = fasta_names),
        expand('results/phylobayes_output/{fasta_name}_bpcomp_output.con.tre', \
            fasta_name = fasta_names),
        expand('results/phylobayes_pdf/{fasta_name}.pdf', \
            fasta_name = fasta_names),
        expand('results/phylobayes_pdf_with_boots/{fasta_name}.pdf', \
            fasta_name = fasta_names),
        expand('results/trimmed_fasta_reduced_decoded/{fasta_name}.afaa', \
            fasta_name = fasta_names),
        expand('results/iqtree_standard_pdf/{fasta_name}.pdf', \
            fasta_name = fasta_names),
        'results/workflow_diagram.pdf'


rule help:
    """
    Print list of all targets with help.
    """
    run:
        for rule in workflow.rules:
            print(rule.name)
            print(rule.docstring)


rule superfast_fasttree:
    """
    Get output files from partial analysis.
    """
    input:
        expand('results/fasttree_pdf/{fasta_name}.pdf', \
            fasta_name = fasta_names),
        expand('results/trimmed_fasta_reduced_decoded/{fasta_name}.afaa', \
            fasta_name = fasta_names),
        'results/workflow_diagram.pdf'


rule one_ml_search_iqtree:
    """
    Get output files from partial analysis.
    """
    input:
        expand('results/iqtree_one_ml_search_pdf/{fasta_name}.pdf', \
            fasta_name = fasta_names),
        expand('results/trimmed_fasta_reduced_decoded/{fasta_name}.afaa', \
            fasta_name = fasta_names),
        'results/workflow_diagram.pdf'


rule ultrafast_iqtree:
    """
    Get output files from partial analysis.
    """
    input:
        expand('results/iqtree_ultrafast_pdf/{fasta_name}.pdf', \
            fasta_name = fasta_names),
        expand('results/trimmed_fasta_reduced_decoded/{fasta_name}.afaa', \
            fasta_name = fasta_names),
        'results/workflow_diagram.pdf'


rule standard_iqtree:
    """
    Get output files from partial analysis.
    """
    input:
        expand('results/iqtree_standard_pdf/{fasta_name}.pdf', \
            fasta_name = fasta_names),
        expand('results/trimmed_fasta_reduced_decoded/{fasta_name}.afaa', \
            fasta_name = fasta_names),
        'results/workflow_diagram.pdf'


rule cdhit_subsets:
    """
    Reduce redundancy of sequences in each relevant input file.
    """
    input:
        files = input_fasta_files,
        fasta_dir = 'resources/{fasta_name}_FASTA'

    output:
        fasta_dir = directory('results/reduced_subsets_fasta/{fasta_name}_FASTA')

    conda:
        'envs/cdhit.yaml'

    shell:
        """
        mkdir -p {output.fasta_dir} && \
        for X in {input.fasta_dir}/*.faa; do \
          if ! [[ "$X" == *"ESSENTIAL"* ]] 
            then
            cd-hit -i $X -o {output.fasta_dir}/$( basename $X ) \
                -n 5 \
                -c 0.70
          fi
          done
        """


rule align_subsets:
    """
    Align a FASTA file using MAFFT.

    See documentation here for choosing paramaters:
        https://mafft.cbrc.jp/alignment/software/algorithms/algorithms.html
        https://mafft.cbrc.jp/alignment/software/manual/manual.html
    """
    input:
        nonredun_fasta_dir =\
        'results/reduced_subsets_fasta/{fasta_name}_FASTA'

    output:
        aligned_fasta_dir =\
        directory('results/reduced_subsets_aligned_fasta/{fasta_name}_FASTA')

    conda:
        'envs/mafft.yaml'

    shell:
        """
        mkdir -p {output.aligned_fasta_dir} && \
        for X in {input.nonredun_fasta_dir}/*.faa
            do 
            mafft --maxiterate 1000 --localpair --thread -1 $X > \
                $(echo {output.aligned_fasta_dir}/$( basename $X ) | cut -f 1 -d '.')'.afaa'
            done
        """


rule seqbouncer:
    """
    Filter outlier sequences using the SequenceBouncer.py script written by
    Cory D. Dunn, downloaded from GitHub
    (https://github.com/corydunnlab/SequenceBouncer, commit ID:
    50596c3a4f6372dd77586872d112417433bf2e83).

    Citation:
         SequenceBouncer: A method to remove outlier entries from a multiple
         sequence alignment Cory D. Dunn bioRxiv 2020.11.24.395459; doi:
         https://doi.org/10.1101/2020.11.24.395459

    Note: If the -k option is set to zero, then all sequences with median "nCS"
    scores above the 75th percentile will be excluded.
    """
    input:
        sequence_bouncer_script = 'workflow/scripts/SequenceBouncer.py',
        fasta_unalignment_script = 'workflow/scripts/afa_to_fa.py',
        aligned_fasta_dir =\
        'results/reduced_subsets_aligned_fasta/{fasta_name}_FASTA'

    output:
        filtered_fasta_dir =\
        directory('results/reduced_subsets_filtered_fasta/{fasta_name}_FASTA')

    conda:
        'envs/seqbouncer.yaml'

    shell:
        """
        mkdir -p {output.filtered_fasta_dir} && \
        for X in {input.aligned_fasta_dir}/*.afaa; do \
            python3 {input.sequence_bouncer_script} \
              -i $X \
              -o $(echo {output.filtered_fasta_dir}/$( basename $X ) | cut -f 1 -d '.') \
              -g 20 \
              -s 3 \
              -k -0.5 \
            && \
            python3 {input.fasta_unalignment_script} \
                       $(echo {output.filtered_fasta_dir}/$( basename $X) \
                           | cut -f 1 -d '.')'_output_clean.fasta' \
                       $(echo {output.filtered_fasta_dir}/$( basename $X) \
                           | cut -f 1 -d '.')'.faa'
            done
        """


rule randomly_sample_seqs:
    """
    Randomly sample a given maximum number of sequences (without replacement)
    from each input FASTA file. A seed number is specified for random sampling,
    so sampling is reproducible.
    """
    input:
        script = 'workflow/scripts/randomly_sample_seqs.py',
        fasta_dir =\
        'results/reduced_subsets_filtered_fasta/{fasta_name}_FASTA'

    output:
        fasta_dir =\
        directory('results/reduced_subsets_samples_fasta/{fasta_name}_FASTA')

    conda:
        'envs/randomly_sample_seqs.yaml'

    shell:
        """
        # (First argument is sample size.)
        # (Second argument is seed for random sampling.)

        python3 {input.script} \
                    15 \
                    15930 \
                    {input.fasta_dir} \
                    {output.fasta_dir}
        """


rule combine_seqs:
    """
    Generate a combined FASTA file by simply concatenating multiple FASTA files
    together.
    """
    input:
        fasta_dir1 = 'resources/{fasta_name}_FASTA',
        fasta_dir2 = 'results/reduced_subsets_samples_fasta/{fasta_name}_FASTA'

    output:
        concat_fasta_file = 'results/combined_fasta/{fasta_name}.faa'

    shell:
        """
        for X in {input.fasta_dir1}/*.faa; do \
          if [[ "$X" == *"ESSENTIAL"* ]] 
            then
            cat $X >> {output.concat_fasta_file}
          fi 
        done \
        && \
        for X in {input.fasta_dir2}/*.faa; do cat $X >> {output.concat_fasta_file}; done
        """


rule cdhit_combined:
    """
    Run CD-HIT on combined FASTA file to remove redundant sequences.

    The purpose of this step is simply to remove redundant sequences that may
    have been present in more than one input file.
    """
    input:
        concat_fasta_file = 'results/combined_fasta/{fasta_name}.faa'

    output:
        nonredun_fasta_file = 'results/reduced_combined_fasta/{fasta_name}.faa'

    conda:
        'envs/cdhit.yaml'

    shell:
        """
        cd-hit -i {input.concat_fasta_file} -o {output.nonredun_fasta_file} \
            -c 1.0
        """


#rule muscle:
#    """
#    Align a FASTA file using MUSCLE.
#    """
#    input:
#        nonredun_fasta_file = 'results/reduced_combined_fasta/{fasta_name}.faa'
#
#    output:
#        aligned_fasta_file = 'results/aligned_fasta/{fasta_name}.afaa'
#
#    conda:
#        'envs/muscle.yaml'
#
#    shell:
#        """
#        muscle -in {input.nonredun_fasta_file} \
#               -out {output.aligned_fasta_file}
#        """


rule mafft:
    """
    Align a FASTA file using MAFFT.

    See documentation here for choosing paramaters:
        https://mafft.cbrc.jp/alignment/software/algorithms/algorithms.html
        https://mafft.cbrc.jp/alignment/software/manual/manual.html
    """
    input:
        script =\
        'workflow/scripts/remove_guide_alignment_seqs.py',
        fasta_dir = 'resources/{fasta_name}_FASTA',
        nonredun_fasta_file = 'results/reduced_combined_fasta/{fasta_name}.faa'

    output:
        aligned_fasta_file = 'results/aligned_fasta/{fasta_name}.afaa'

    conda:
        'envs/mafft.yaml'

    shell:
        """
        guide_alignment="" && \
        for X in {input.fasta_dir}/*.afaa; do \
          if [[ "$X" == *"GUIDE"* ]]  
          then  
            guide_alignment=$X 
          fi 
        done && \
        echo $guide_alignment && \
        if [[ "$guide_alignment" == "" ]]  
        then 
          #mafft --maxiterate 1000 --localpair --thread -1 --auto {input.nonredun_fasta_file} > {output.aligned_fasta_file} 
          mafft --maxiterate 1000 --localpair --thread -1 --dash --originalseqonly {input.nonredun_fasta_file} > {output.aligned_fasta_file} 
        else 
          mafft --maxiterate 1000 --localpair --thread -1 --add {input.nonredun_fasta_file} $guide_alignment > {output.aligned_fasta_file} && \
          python3 {input.script} {output.aligned_fasta_file} $guide_alignment
        fi
        """


rule trimal_trim:
    """
    Trim positions from a sequence alignment using TrimAl.
    """
    input:
        aligned_fasta_file = 'results/aligned_fasta_coded/{fasta_name}.afaa'

    output:
        trimmed_fasta_file = 'results/trimmed_fasta_coded/{fasta_name}.afaa'

    conda:
        'envs/trimal.yaml'

    shell:
        """
        #trimal -in {input.aligned_fasta_file} -out {output.trimmed_fasta_file} -gappyout
        #trimal -in {input.aligned_fasta_file} -out {output.trimmed_fasta_file} -automated1
        # -gt 0.5
        trimal \
            -in {input.aligned_fasta_file} \
            -out {output.trimmed_fasta_file} \
            -htmlout \
                $(echo {output.trimmed_fasta_file} | cut -f 1 -d '.')'_trimming_record.html' \
            -gt 0.4

        """


rule trimal_reduce_seqs:
    """
    Remove non-representative sequences from an alignment using TrimAl.
    """
    input:
        aligned_fasta_file = 'results/trimmed_fasta_coded/{fasta_name}.afaa'

    output:
        trimmed_fasta_file = 'results/trimmed_fasta_reduced_coded/{fasta_name}.afaa'

    conda:
        'envs/trimal.yaml'

    shell:
        """
        trimal \
            -in {input.aligned_fasta_file} \
            -out {output.trimmed_fasta_file} \
            -htmlout \
                $(echo {output.trimmed_fasta_file} | cut -f 1 -d '.')'_trimming_record.html' \
                -resoverlap 0.0 \
                -seqoverlap 0

        """


rule afa_to_phy:
    """
    Convert aligned FASTA files to PHYLIP format.

    Necessary for Phylobayes.

    """
    input:
        script = 'workflow/scripts/afa_to_phy.py',
        trimmed_fasta_coded_file = 'results/trimmed_fasta_reduced_coded/{fasta_name}.afaa'

    output:
        phylip_file = 'results/trimmed_phylip_coded/{fasta_name}.phy'

    conda:
        'envs/afa_to_phy.yaml'

    shell:
        """
        python3 {input.script} {input.trimmed_fasta_coded_file} {output.phylip_file}
        """


rule modelfinder:
    """
    Find the best-fit model of amino acid sequence evolution using ModelFinder
    from the IQ-TREE package.
    """
    input:
        trimmed_fasta_file = 'results/trimmed_fasta_reduced_coded/{fasta_name}.afaa'

    output:
        model_file = 'results/modelfinder_output/{fasta_name}.iqtree'

    conda:
        'envs/modelfinder.yaml'

    shell:
        """
        iqtree \
              -s {input.trimmed_fasta_file} \
              -pre $(echo {output.model_file} | cut -f 1 -d '.') \
              -nt AUTO \
              -m MF \
              -madd C10,C20,C30,C40,C50,C60,LG4X,LG4M
        """


rule parse_modelfinder:
    """
    Extract the name of the best-fit model identified by ModelFinder from the
    ModelFinder output, and write to a text file.
    """
    input:
        model_file = 'results/modelfinder_output/{fasta_name}.iqtree'

    output:
        model_text_file = 'results/modelfinder_output/{fasta_name}.txt'

    run:
        model_code = None
        with open(input.model_file) as infh:
            for i in infh:
                if i.startswith('Best-fit model according to BIC'):
                    model_code = i.rsplit(' ', 1)[1]
                    break
        assert model_code is not None
        with open(output.model_text_file, 'w') as o:
            o.write(model_code)


rule fasttree:
    """
    Run FastTree on a trimmed sequence alignment.
    """
    input:
        trimmed_fasta_file = 'results/trimmed_fasta_reduced_coded/{fasta_name}.afaa'

    output:
        newick_tree_file = 'results/fasttree_newick_coded/{fasta_name}.tre'

    conda:
        'envs/fasttree.yaml'

    shell:
        """
        #fasttree -lg -mlnni 14 -mlacc 3 -spr 200  -sprlength 1000 -out {output.newick_tree_file} {input.trimmed_fasta_file}
        #fasttree -lg -mlnni 1000 -mlnni 14 -mlacc 3 -spr 200  -sprlength 1000 -out {output.newick_tree_file} {input.trimmed_fasta_file}
        fasttree -lg -slow -out {output.newick_tree_file} {input.trimmed_fasta_file}
        """


rule visualize_fasttree:
    """
    Render the newick tree output by FastTree as a phylogram in PDF format.
    """
    input:
        script = 'workflow/scripts/visualize_fasttree.py',
        tree_newick = 'results/fasttree_newick_decoded/{fasta_name}.tre'

    output:
        tree_pdf = 'results/fasttree_pdf/{fasta_name}.pdf'

    conda:
        'envs/visualize_fasttree.yaml'

    shell:
        """
        python3 {input.script} {input.tree_newick} {output.tree_pdf}
        """


rule code_names:
    """
    Take trimmed alignment files and convert sequence names to short
    alphanumeric codes.

    Necessary before converting to PHYLIP format (for Phylobayes, etc.).
    """
    input:
        script = 'workflow/scripts/code_names.py',
        fasta_file = 'results/aligned_fasta/{fasta_name}.afaa'

    output:
        coded_fasta_file = 'results/aligned_fasta_coded/{fasta_name}.afaa',
        conversion_table_file = 'results/aligned_fasta_coded/{fasta_name}.table'

    conda:
        'envs/name_replace.yaml'

    shell:
        """
        python3 {input.script} \
                    {input.fasta_file} \
                    {output.coded_fasta_file} \
                    {output.conversion_table_file} 
        """


rule decode_alignment:
    """
    Decode names in alignment files.
    """
    input:
        script = 'workflow/scripts/decode_names_in_alignment.py',
        alignment = \
        'results/trimmed_fasta_reduced_coded/{fasta_name}.afaa',
        conversion_table_file = 'results/aligned_fasta_coded/{fasta_name}.table'

    output:
        alignment = \
        'results/trimmed_fasta_reduced_decoded/{fasta_name}.afaa'

    conda:
        'envs/name_replace.yaml'

    shell:
        """
        python3 {input.script} \
                    {input.alignment} \
                    {output.alignment} \
                    {input.conversion_table_file} 
        """


rule decode_iqtree_one_ml_search_names:
    """
    Decode names in newick tree files.

    Necessary before visualizing trees.
    """
    input:
        script = 'workflow/scripts/decode_names.py',
        newick_file = \
        'results/iqtree_one_ml_search_newick/{fasta_name}.treefile',
        conversion_table_file = 'results/aligned_fasta_coded/{fasta_name}.table'

    output:
        decoded_newick_file = 'results/iqtree_one_ml_search_newick_decoded/{fasta_name}.treefile'

    conda:
        'envs/name_replace.yaml'

    shell:
        """
        python3 {input.script} \
                    {input.newick_file} \
                    {output.decoded_newick_file} \
                    {input.conversion_table_file} 
        """


rule decode_iqtree_ultrafast_names:
    """
    Decode names in newick tree files.

    Necessary before visualizing trees.
    """
    input:
        script = 'workflow/scripts/decode_names.py',
        newick_file = \
        'results/iqtree_ultrafast_newick/{fasta_name}.treefile',
        conversion_table_file = 'results/aligned_fasta_coded/{fasta_name}.table'

    output:
        decoded_newick_file = 'results/iqtree_ultrafast_newick_decoded/{fasta_name}.treefile'

    conda:
        'envs/name_replace.yaml'

    shell:
        """
        python3 {input.script} \
                    {input.newick_file} \
                    {output.decoded_newick_file} \
                    {input.conversion_table_file} 
        """


rule decode_iqtree_standard_names:
    """
    Decode names in newick tree files.

    Necessary before visualizing trees.
    """
    input:
        script = 'workflow/scripts/decode_names.py',
        newick_file = \
        'results/iqtree_standard_newick/{fasta_name}.treefile',
        conversion_table_file = 'results/aligned_fasta_coded/{fasta_name}.table'

    output:
        decoded_newick_file = 'results/iqtree_standard_newick_decoded/{fasta_name}.treefile'

    conda:
        'envs/name_replace.yaml'

    shell:
        """
        python3 {input.script} \
                    {input.newick_file} \
                    {output.decoded_newick_file} \
                    {input.conversion_table_file} 
        """


rule decode_pb_names:
    """
    Decode names in newick tree files.

    Necessary before visualizing trees.
    """
    input:
        script = 'workflow/scripts/decode_names.py',
        newick_file =\
        'results/phylobayes_output/{fasta_name}_bpcomp_output.con.tre',
        conversion_table_file = 'results/aligned_fasta_coded/{fasta_name}.table'

    output:
        decoded_newick_file =\
        'results/phylobayes_newick_decoded/{fasta_name}_bpcomp_output.con.tre'

    conda:
        'envs/name_replace.yaml'

    shell:
        """
        python3 {input.script} \
                    {input.newick_file} \
                    {output.decoded_newick_file} \
                    {input.conversion_table_file} 
        """


rule decode_pb_with_boot_names:
    """
    Decode names in newick tree files.

    Necessary before visualizing trees.
    """
    input:
        script = 'workflow/scripts/decode_names.py',
        newick_file =\
        'results/phylobayes_newick_with_boots/{fasta_name}.suptree',
        conversion_table_file = 'results/aligned_fasta_coded/{fasta_name}.table'

    output:
        decoded_newick_file =\
        'results/phylobayes_newick_with_boots_decoded/{fasta_name}.suptree'

    conda:
        'envs/name_replace.yaml'

    shell:
        """
        python3 {input.script} \
                    {input.newick_file} \
                    {output.decoded_newick_file} \
                    {input.conversion_table_file} 
        """


rule decode_fasttree_names:
    """
    Decode names in newick tree files.

    Necessary before visualizing trees.
    """
    input:
        script = 'workflow/scripts/decode_names.py',
        newick_file = \
        'results/fasttree_newick_coded/{fasta_name}.tre',
        conversion_table_file = 'results/aligned_fasta_coded/{fasta_name}.table'

    output:
        decoded_newick_file = 'results/fasttree_newick_decoded/{fasta_name}.tre'

    conda:
        'envs/name_replace.yaml'

    shell:
        """
        python3 {input.script} \
                    {input.newick_file} \
                    {output.decoded_newick_file} \
                    {input.conversion_table_file} 
        """


rule iqtree_one_ml_search:
    """
    Perform one Maximum Likelihood (ML) tree search with IQ-TREE.
    """
    input:
        phylip_file = 'results/trimmed_phylip_coded/{fasta_name}.phy',
        model_text_file = 'results/modelfinder_output/{fasta_name}.txt'

    output:
        newick_tree_file = 'results/iqtree_one_ml_search_newick/{fasta_name}.treefile'

    conda:
        'envs/iqtree_ultrafast.yaml'

    shell:
        """
        iqtree \
            -s {input.phylip_file} \
            -nt AUTO \
            -m $(cat {input.model_text_file}) \
            -pre $(echo {output.newick_tree_file} | cut -f 1 -d '.') \
        """


rule iqtree_ultrafast:
    """
    Perform ultrafast bootstrapping with IQ-TREE.
    """
    input:
        phylip_file = 'results/trimmed_phylip_coded/{fasta_name}.phy',
        model_text_file = 'results/modelfinder_output/{fasta_name}.txt'

    output:
        newick_tree_file = 'results/iqtree_ultrafast_newick/{fasta_name}.treefile'

    conda:
        'envs/iqtree_ultrafast.yaml'

    shell:
        """
        iqtree \
            -s {input.phylip_file} \
            -nt AUTO \
            -m $(cat {input.model_text_file}) \
            -pre $(echo {output.newick_tree_file} | cut -f 1 -d '.') \
            -B 1000 \
            -bnni
        """


rule iqtree_standard:
    """
    Run IQ-TREE with standard non-parametric bootstrapping. This more thorough
    form of bootstrapping often yields considerably different topologies than
    ultrafast bootstrapping, at least for single-gene/protein analyses.
    """
    input:
        phylip_file = 'results/trimmed_phylip_coded/{fasta_name}.phy'

    output:
        newick_tree_file =\
        'results/iqtree_standard_newick/{fasta_name}.treefile',
        bootstraps_file = \
        'results/iqtree_standard_newick/{fasta_name}.boottrees',

    conda:
        'envs/iqtree_ultrafast.yaml'

    shell:
        """
        mpirun -np 8 iqtree-mpi \
            -s {input.phylip_file} \
            -pre $(echo {output.newick_tree_file} | cut -f 1 -d '.') \
            -nt AUTO \
            -m C20 \
            -b 100
        """


rule visualize_iqtree_one_ml_search:
    """
    Render the newick tree output by IQ-TREE as a phylogram in PDF format.
    """
    input:
        script = 'workflow/scripts/visualize_fasttree.py',
        tree_newick = 'results/iqtree_one_ml_search_newick_decoded/{fasta_name}.treefile'

    output:
        tree_pdf = 'results/iqtree_one_ml_search_pdf/{fasta_name}.pdf'

    conda:
        'envs/visualize_fasttree.yaml'

    shell:
        """
        python3 {input.script} {input.tree_newick} {output.tree_pdf}
        """


rule visualize_iqtree_ultrafast:
    """
    Render the newick tree output by IQ-TREE as a phylogram in PDF format.
    """
    input:
        script = 'workflow/scripts/visualize_fasttree.py',
        tree_newick = 'results/iqtree_ultrafast_newick_decoded/{fasta_name}.treefile'

    output:
        tree_pdf = 'results/iqtree_ultrafast_pdf/{fasta_name}.pdf'

    conda:
        'envs/visualize_fasttree.yaml'

    shell:
        """
        python3 {input.script} {input.tree_newick} {output.tree_pdf}
        """


rule visualize_iqtree_standard:
    """
    Render the newick tree output by IQ-TREE as a phylogram in PDF format.
    """
    input:
        script = 'workflow/scripts/visualize_fasttree.py',
        tree_newick = 'results/iqtree_standard_newick_decoded/{fasta_name}.treefile'

    output:
        tree_pdf = 'results/iqtree_standard_pdf/{fasta_name}.pdf'

    conda:
        'envs/visualize_fasttree.yaml'

    shell:
        """
        python3 {input.script} {input.tree_newick} {output.tree_pdf}
        """


rule visualize_pb:
    """
    Render the newick tree output by Phylobayes as a phylogram in PDF format.
    """
    input:
        script = 'workflow/scripts/visualize_fasttree.py',
        tree_newick =\
        'results/phylobayes_newick_decoded/{fasta_name}_bpcomp_output.con.tre'

    output:
        tree_pdf = 'results/phylobayes_pdf/{fasta_name}.pdf'

    conda:
        'envs/visualize_fasttree.yaml'

    shell:
        """
        python3 {input.script} {input.tree_newick} {output.tree_pdf}
        """


rule map_boots_on_pb:
    """
    Map bootstrap support values from standard IQ-TREE bootstrap analysis to
    Phylobayes topology.
    """
    input:
        script = 'workflow/scripts/map_boots_on_pb.py',
        pb_newick =\
        'results/phylobayes_output/{fasta_name}_bpcomp_output.con.tre',
        iqtree_bootstrap_newick =\
        'results/iqtree_standard_newick/{fasta_name}.boottrees'

    output:
        just_boots_newick =\
        'results/phylobayes_newick_with_boots/{fasta_name}_boots_only.suptree',
        newick = 'results/phylobayes_newick_with_boots/{fasta_name}.suptree'

    conda:
        'envs/visualize_fasttree.yaml'

    shell:
        """
        python3 {input.script} \
                    {input.pb_newick} \
                    {input.iqtree_bootstrap_newick} \
                    {output.newick}
        """


rule decode_boots_on_pb:
    """
    Decode names in newick tree files.

    Necessary before visualizing trees.
    """
    input:
        script = 'workflow/scripts/decode_names.py',
        newick_file = \
        'results/phylobayes_newick_with_boots/{fasta_name}_boots_only.suptree',
        conversion_table_file = 'results/aligned_fasta_coded/{fasta_name}.table'

    output:
        decoded_newick_file = \
        'results/phylobayes_newick_with_boots_only_decoded/{fasta_name}_boots_only.suptree',

    conda:
        'envs/name_replace.yaml'

    shell:
        """
        python3 {input.script} \
                    {input.newick_file} \
                    {output.decoded_newick_file} \
                    {input.conversion_table_file} 
        """


rule visualize_boots_on_pb:
    """
    Render the newick tree output by Phylobayes with both posterior
    probabilities from Phylobayes and bootstrap values from IQ-TREE as a
    phylogram in PDF format.
    """
    input:
        script = 'workflow/scripts/visualize_boots_on_pb.py',
        pb_newick =\
        'results/phylobayes_newick_decoded/{fasta_name}_bpcomp_output.con.tre',
        pb_newick_boots_only = \
        'results/phylobayes_newick_with_boots_only_decoded/{fasta_name}_boots_only.suptree'

    output:
        tree_pdf = 'results/phylobayes_pdf_with_boots/{fasta_name}.pdf'

    conda:
        'envs/visualize_fasttree.yaml'

    shell:
        """
        python3 {input.script} {input.pb_newick} {input.pb_newick_boots_only} {output.tree_pdf}
        """


rule pb_chain_one:
    """
    Run one MCMC tree-searching chain using Phylobayes.
    """
    input:
        phylip_file = 'results/trimmed_phylip_coded/{fasta_name}.phy'

    output:
        topology_file =\
        'results/phylobayes_output/{fasta_name}_chain_1.treelist'

    conda:
        'envs/phylobayes_mpi.yaml'

    shell:
        """
        mpirun -n 16 pb_mpi -d {input.phylip_file} \
                           -x 1 10000 \
                           -catfix C20 -gtr \
                           $(echo {output.topology_file} | cut -f 1 -d '.')
        """


rule pb_chain_two:
    """
    Run one MCMC tree-searching chain using Phylobayes.
    """
    input:
        phylip_file = 'results/trimmed_phylip_coded/{fasta_name}.phy'

    output:
        topology_file =\
        'results/phylobayes_output/{fasta_name}_chain_2.treelist'

    conda:
        'envs/phylobayes_mpi.yaml'

    shell:
        """
        mpirun -n 16 pb_mpi -d {input.phylip_file} \
                           -x 1 10000 \
                           -catfix C20 -gtr \
                           $(echo {output.topology_file} | cut -f 1 -d '.')
        """


rule trace_pb_chains:
    """
    Generate a consensus tree with posterior probabilities from two Phylobayes
    chains (and generate files with measures of convergence).
    """
    input:
        topology_file_1 =\
        'results/phylobayes_output/{fasta_name}_chain_1.treelist',
        topology_file_2 =\
        'results/phylobayes_output/{fasta_name}_chain_2.treelist'

    output:
        consensus_tree =\
        'results/phylobayes_output/{fasta_name}_bpcomp_output.con.tre'

    conda:
        'envs/phylobayes_mpi.yaml'

    shell:
        """
        bpcomp \
            -x 20 1 \
            -c 0.0 \
            -o $(echo {output.consensus_tree} | cut -f 1 -d '.') \
            $(echo {input.topology_file_1} | cut -f 1 -d '.') \
            $(echo {input.topology_file_2} | cut -f 1 -d '.')
        """


rule plot_workflow:
    """
    Plot the snakemake workflow defined in the Snakefile file.
    """
    output:
        pdf = 'results/workflow_diagram.pdf',
        png = 'images/workflow_diagram.png'
    shell: 
        #'snakemake --cores 1 -p --rulegraph | dot -Tpdf > {output}'
        #snakemake --cores 1 -p --filegraph | dot -Tpdf > {output.pdf} && \
        #snakemake --cores 1 -p --filegraph | dot -Tpng > {output.png}
        """
        snakemake --cores 1 -p --rulegraph | dot -Tpdf > {output.pdf} && \
        snakemake --cores 1 -p --rulegraph | dot -Tpng > {output.png}
        """

