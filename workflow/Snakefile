"""
SnakeMake workflow definition file.

"""
import os
import shutil
import glob
from snakemake.io import expand, glob_wildcards
from snakemake.utils import Paramspace
import pandas as pd

# Define path to workflow configuration YAML file.
configfile: 'config.yaml'

# If necessary, download software dependencies not available through package
# managers.
results_dir = 'results'
if not os.path.isdir(results_dir):
    os.mkdir(results_dir)
additional_software_dir = os.path.join(results_dir, 'software')
if not os.path.isdir(additional_software_dir):
    os.mkdir(additional_software_dir)
sequence_bouncer_file = os.path.join(additional_software_dir,
                                     'SequenceBouncer.py')
if not os.path.isfile(sequence_bouncer_file):
    subprocess.call(['curl', '-o', sequence_bouncer_file, 
                     'https://raw.githubusercontent.com/corydunnlab/SequenceBouncer/main/SequenceBouncer.py'])

# Define input file paths.
input_fasta_dirs = glob.glob(os.path.join('resources', '*_FASTA'))
fasta_names = [os.path.basename(x).rsplit('_', 1)[0] \
                for x in input_fasta_dirs]
input_fasta_files = glob.glob(os.path.join(
                                  os.path.join('resources',
                                               '*_FASTA'), 
                                  '*.faa'))

# Check input data formatting.
for input_dir in input_fasta_dirs:
    files = glob.glob(os.path.join(input_dir, '*.afaa'))
    files_identified_as_guide_alignments = \
    [x for x in files if 'GUIDE' in x]
    assert len(files_identified_as_guide_alignments) <= 1, """More than one
    guide alignment detected in directory: %s""" % input_dir

# Declare a dataframe to be a paramspace for random seeds used in sampling
# sequences prior to alignment for phylogenetic analysis.
paramspace1_file = "resources/randomly_sample_seqs_random_seeds.csv"
paramspace1 = \
Paramspace(pd.read_csv(paramspace1_file))

# Define which rules are to be run without submitting to a cluster via a job
# scheduler.
localrules: final_results, help, superfast_fasttree, ultrafast_iqtree


# Define workflow rules.

rule final_results:
    """
    Get output files from full analysis.
    """
    input:
        expand('results/visualize_fasttree/{params}/{fasta_name}.pdf', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        expand('results/decode_alignment/{params}/{fasta_name}.afaa', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        expand('results/visualize_pb/{params}/{fasta_name}.pdf', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        expand('results/iqtree_standard_pdf/{params}/{fasta_name}.pdf', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        expand('results/visualize_boots_on_pb/{params}/{fasta_name}.pdf', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        expand('results/visualize_constrained_ml_searches/{params}/{fasta_name}', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        expand('results/visualize_iqtree_ml_search/{params}/{fasta_name}.pdf', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        'results/summarize_au_tests/iqtree_au_test_summary.csv',
        'results/workflow_diagram.pdf'


rule help:
    """
    Print list of all targets with help.
    """
    run:
        for rule in workflow.rules:
            print(rule.name)
            print(rule.docstring)

 
rule run_code_constraint_trees:
    """
    """
    input:
        expand('results/code_constraint_trees/{params}/{fasta_name}', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns)


rule superfast_fasttree:
    """
    Get output files from partial analysis.
    """
    input:
        expand('results/visualize_fasttree/{params}/{fasta_name}.pdf', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        expand('results/decode_alignment/{params}/{fasta_name}.afaa', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        'results/workflow_diagram.pdf'


rule ml_search_iqtree:
    """
    Get output files from partial analysis.
    """
    input:
        expand('results/visualize_iqtree_ml_search/{params}/{fasta_name}.pdf', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        expand('results/decode_alignment/{params}/{fasta_name}.afaa', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        'results/workflow_diagram.pdf'


rule au_test_iqtree:
    """
    Get output files from partial analysis.
    """
    input:
        expand('results/iqtree_au_test/{params}/{fasta_name}.iqtree', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        expand('results/visualize_constrained_ml_searches/{params}/{fasta_name}', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        expand('results/visualize_iqtree_ml_search/{params}/{fasta_name}.pdf', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        'results/summarize_au_tests/iqtree_au_test_summary.csv',
        'results/workflow_diagram.pdf'


rule ultrafast_iqtree:
    """
    Get output files from partial analysis.
    """
    input:
        expand('results/visualize_iqtree_ultrafast/{params}/{fasta_name}.pdf', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        expand('results/decode_alignment/{params}/{fasta_name}.afaa', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        'results/workflow_diagram.pdf'


rule standard_iqtree:
    """
    Get output files from partial analysis.
    """
    input:
        expand('results/iqtree_standard_pdf/{params}/{fasta_name}.pdf', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        expand('results/decode_alignment/{params}/{fasta_name}.afaa', \
            fasta_name = fasta_names, params=paramspace1.instance_patterns),
        'results/workflow_diagram.pdf'


rule plot_workflow:
    """
    Plot the snakemake workflow defined in the Snakefile file.
    """
    output:
        pdf = 'results/workflow_diagram.pdf',
        png = 'images/workflow_diagram.png'
    shell: 
        #'snakemake --cores 1 -p --rulegraph | dot -Tpdf > {output}'
        #snakemake --cores 1 -p --filegraph | dot -Tpdf > {output.pdf} && \
        #snakemake --cores 1 -p --filegraph | dot -Tpng > {output.png}
        """
        snakemake --cores 1 -p --rulegraph | dot -Tpdf > {output.pdf} && \
        snakemake --cores 1 -p --rulegraph | dot -Tpng > {output.png}
        """


# Include additional rules from files in the rules subdirectory.

include: "rules/cdhit_subsets.smk"
include: "rules/align_subsets.smk"
include: "rules/sequencebouncer.smk"
include: "rules/randomly_sample_seqs.smk"
include: "rules/combine_seqs.smk"
include: "rules/cdhit_combined.smk"
include: "rules/mafft.smk"
include: "rules/trimal.smk"
include: "rules/afa_to_phy.smk"
include: "rules/modelfinder.smk"
include: "rules/parse_modelfinder.smk"
include: "rules/fasttree.smk"
include: "rules/visualize_fasttree.smk"
include: "rules/code_names.smk"
include: "rules/decode_alignment.smk"
include: "rules/decode_iqtree_ml_search_names.smk"
include: "rules/decode_constrained_ml_search_names.smk"
include: "rules/decode_iqtree_ultrafast_names.smk"
include: "rules/decode_iqtree_standard_names.smk"
include: "rules/decode_pb_names.smk"
include: "rules/decode_pb_with_boot_names.smk"
include: "rules/decode_fasttree_names.smk"
include: "rules/iqtree_ml_search.smk"
include: "rules/elaborate_constraint_trees.smk"
include: "rules/code_constraint_trees.smk"
include: "rules/iqtree_constrained_ml_searches.smk"
include: "rules/concat_ml_trees.smk"
include: "rules/iqtree_au_test.smk"
include: "rules/summarize_au_tests.smk"
include: "rules/iqtree_ultrafast.smk"
include: "rules/iqtree_standard.smk"
include: "rules/visualize_iqtree_ml_search.smk"
include: "rules/visualize_constrained_ml_searches.smk"
include: "rules/visualize_iqtree_ultrafast.smk"
include: "rules/visualize_iqtree_standard.smk"
include: "rules/visualize_pb.smk"
include: "rules/map_boots_on_pb.smk"
include: "rules/decode_boots_on_pb.smk"
include: "rules/visualize_boots_on_pb.smk"
include: "rules/pb_chain_one.smk"
include: "rules/pb_chain_two.smk"
include: "rules/trace_pb_chains.smk"



